<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <script src="https://d3js.org/d3.v7.min.js"></script>
  <script src="https://d3js.org/topojson.v3.min.js"></script>

  <style>
    .gridlines line {
      stroke: #bbb;
    }

    .gridlines .domain {
      stroke: none;
    }

    .neighborhood {
      fill: #eee;
      stroke: #fff;
      stroke-width: 2;
    }

    .mini {
      fill: #eee;
      stroke: #fff;
      stroke-width: 1;
    }
  </style>
  <title>INFO 4310 - A1</title>
</head>


<body>
  <h1>INFO 4310 - Homework 1</h1>
  <h3>Student: Longyi Zhang (lz533)</h3>

  <div>
    <svg id="main" height=900 width=1080 style="border:1px solid black;margin-bottom: 0;">
    </svg>

    <svg id="aux" height=800 width=1080 style="border:1px solid black;margin-bottom: 50px;">
    </svg>

    <svg id="pies" height=1000 width=1080 style="margin-bottom: 50px;">
    </svg>
    <script>

      // set up map vis
      const main = d3.select("#main")
      const mainMargin = { t: 60, r: 200, b: 20, l: 20 }
      const mainWidth = main.attr("width") - mainMargin.l - mainMargin.r
      const mainHeight = main.attr("height") - mainMargin.t - mainMargin.b
      const viewport = main.append("g")
        .attr("transform", `translate(${mainMargin.l},${mainMargin.t})`)
      const mainLegends = main.append("g")
        .attr("transform", "translate(770,300)")

      // set up auxiliary vis
      const aux = d3.select("#aux")
      const auxMargin = { t: 10, r: 10, b: 50, l: 10 }
      const auxWidth = aux.attr("width") / 3 - auxMargin.l - auxMargin.r
      const auxHeight = aux.attr("height") / 2 - auxMargin.t - auxMargin.b
      // // iteratively generate viewports later
      // const plot = aux.append("g")
      //   .attr("transform", `translate(${auxMargin.l},${auxMargin.t})`)

      // set up pie charts
      const pies = d3.select("#pies")
      const piesMargin = { t: 20, r: 20, b: 20, l: 20 }
      // const piesWidth = pies.attr("width") - piesMargin.l - piesMargin.r
      // const piesHeight = pies.attr("height") - piesMargin.t - piesMargin.b
      const pieParty = pies.append("g")
        .attr("transform", `translate(${piesMargin.l},${piesMargin.t})`)

      // main course
      let render = async function () {
        let df = await d3.csv('./Street_Tree_List-2022-01-30_ULTRAFILTERED.csv')
        let sf = await d3.json("./SF-Neighborhoods.geo.json")

        console.log(df)

        // map scaffolding
        let neighborhoods = topojson.feature(sf, sf.objects.SFNeighborhoods)
        let projection = d3.geoAlbersUsa().fitSize([mainWidth, mainHeight], neighborhoods)
        let path = d3.geoPath().projection(projection)
        viewport.selectAll("path.neighborhood").data(neighborhoods.features).join("path")
          .attr("class", "neighborhood")
          .attr("d", path)

        // separate projection and paths for auxiliary vis
        let auxProjection = d3.geoAlbersUsa().fitSize([auxWidth, auxHeight], neighborhoods)
        let auxPath = d3.geoPath().projection(auxProjection)

        // preprocessing of loaded tree dataset for visualisation, in addition to preprocessing to the .csv files
        df.forEach(d => {
          d.Position = projection([d.Longitude, d.Latitude])
          d.Aux_Position = auxProjection([d.Longitude, d.Latitude])

        })

        // sum up tree characteristics by species
        let bySpecies = Array.from(d3.group(df, d => d.qSpecies))
        let byCaretaker = Array.from(d3.group(df, d => d.qCaretaker))

        bySpecies.forEach(d => {
          d[2] = d[1].length
          d[3] = d3.mean(d[1], tree => tree.DBH)
        })
        bySpecies.sort((a, b) => -a[2] - -b[2]) // sort species by number of trees in descending order
        let top = bySpecies.slice(0, 5) // top 5 species by tree count in SF
        let topSpecies = top.map(d => d[0])
        top.forEach(d => {
          // mean DBH for datavis
          d[3] = d3.mean(d[1], tree => tree.DBH).toFixed(1)
          // maintainer breakdown for datavis, only Private and DPW has large number of trees
          let private = 0
          let dpw = 0
          d[1].forEach(tree => {
            if (tree.qCaretaker === "Private") { private++ }
            else if (tree.qCaretaker === "DPW") { dpw++ }
          })
          d[4] = { "Private": private, "DPW": dpw, "Other Public": d[2] - private - dpw }
        })
        let topDBH = top.map(d => d[3])
        let topCaretaker = Object.keys(top[0][4])
        console.log(top)
        console.log(topCaretaker)

        // additional variables
        let DBHScale = d3.scaleLinear([0, Math.max(...topDBH)], [0, 180])
        let rimScale = d3.scaleLinear([0, Math.max(...topDBH)], [0, 10])
        let speciesScale = d3.scaleOrdinal(topSpecies, d3.schemeCategory10)
        let caretakerScale = d3.scaleOrdinal().range(d3.schemeDark2)

        /*********************** TODO: Main Vis **********************/
        // layer of all trees in the dataset
        viewport.selectAll("circle.normal").data(df).join("circle")
          .attr("class", "normal")
          .attr("cx", d => d.Position[0])
          .attr("cy", d => d.Position[1])
          .attr("r", 2)
          .attr("fill", '#ccc')
          .attr("opacity", 0.2)

        // trees from the top species
        viewport.selectAll("circle.top").data(df.filter(d => topSpecies.includes(d.qSpecies))).join("circle")
          .attr("class", "top")
          .attr("cx", d => d.Position[0])
          .attr("cy", d => d.Position[1])
          .attr("r", 2)
          .attr("fill", d => speciesScale(d.qSpecies))
          .attr("opacity", 0.5)


        main.append("text")
          .attr("x", 20)
          .attr("y", 50)
          .attr("fill", '#000')
          .attr("text-anchor", "left")
          .attr("alignment-baseline", "middle")
          .attr("font-family", "sans-serif")
          .attr("font-size", '1.5em')
          .text('Figure 1.1: Distribution of trees from the 5 most populous species')
        // legends
        mainLegends.append("text")
          .attr("class", "mainTitle")
          .attr("x", 30)
          .attr("y", 40)
          .attr("fill", '#000')
          .attr("text-anchor", "left")
          .attr("alignment-baseline", "middle")
          .attr("font-family", "sans-serif")
          .attr("font-size", '1.2em')
          .text('Number of trees by species')

        mainLegends.selectAll("circle.mainMark").data(topSpecies).join("circle")
          .attr("class", "mainMark")
          .attr("cx", 20)
          .attr("cy", (d, i) => 80 + 30 * i)
          .attr("r", 10)
          .attr("fill", d => speciesScale(d))

        mainLegends.selectAll("text.mainLabel").data(topSpecies).join("text")
          .attr("class", "mainLabel")
          .attr("x", 40)
          .attr("y", (d, i) => 80 + 30 * i)
          .attr("fill", d => speciesScale(d))
          .attr("text-anchor", "left")
          .attr("alignment-baseline", "middle")
          .attr("font-family", "sans-serif")
          .text(d => d)

        mainLegends.selectAll("text.mainFigure").data(top).join("text")
          .attr("class", "mainFigure")
          .attr("x", 250)
          .attr("y", (d, i) => 80 + 30 * i)
          .attr("fill", d => speciesScale(d[0]))
          .attr("text-anchor", "right")
          .attr("alignment-baseline", "middle")
          .attr("font-family", "sans-serif")
          .text(d => d[2])




        /*********************** TODO: Aux Vis **********************/

        aux.append("line") // horizontal line
          .attr("x1", 0)
          .attr("x2", aux.attr("width"))
          .attr("y1", aux.attr("height") / 2)
          .attr("y2", aux.attr("height") / 2)
          .attr("stroke", "#000")
        for (i = 0; i < 2; i++) {
          aux.append("line") // vertical line
            .attr("x1", aux.attr("width") * (i + 1) / 3)
            .attr("x2", aux.attr("width") * (i + 1) / 3)
            .attr("y1", 0)
            .attr("y2", aux.attr("height"))
            .attr("stroke", "#888")
        }
        aux.append("text")
          .attr("x", 20)
          .attr("y", 180)
          .attr("fill", '#000')
          .attr("text-anchor", "left")
          .attr("alignment-baseline", "middle")
          .attr("font-family", "sans-serif")
          .attr("font-size", '1.5em')
          .text('Figure 1.2: Tree distribution')

        aux.append("text")
          .attr("x", 20)
          .attr("y", 210)
          .attr("fill", '#000')
          .attr("text-anchor", "left")
          .attr("alignment-baseline", "middle")
          .attr("font-family", "sans-serif")
          .attr("font-size", '1.5em')
          .text('for each species')

        // render breakdown maps iteratively
        top.forEach(function (d, i) {
          let xBias = 0 + aux.attr("width") / 3 * ((i + 1) % 3)
          let yBias = 0 + aux.attr("height") / 2 * Math.floor((i + 1) / 3)
          let tile = aux.append('g')
            .attr('transform', `translate(${auxMargin.l + xBias},${auxMargin.t + yBias})`)

          tile.selectAll("path.neighborhood").data(neighborhoods.features).join("path")
            .attr("class", "mini")
            .attr("d", auxPath)

          tile.selectAll('circle.auxMark').data(d[1]).join('circle')
            .attr("class", "auxMark")
            .attr("cx", data => data.Aux_Position[0])
            .attr("cy", data => data.Aux_Position[1])
            .attr("r", 1)
            .attr("fill", speciesScale(d[0]))
            .attr("opacity", 0.5)

          tile.append("text") // species name label
            .attr("class", "auxLabel")
            .attr("x", auxWidth / 2)
            .attr("y", auxHeight + 10)
            .attr("fill", speciesScale(d[0]))
            .attr("text-anchor", "middle")
            .attr("alignment-baseline", "middle")
            .attr("font-family", "sans-serif")
            .attr("font-size", "1.2em")
            .text(d[0])

        })

        /*********************** TODO: Another Aux Vis **********************/
        let pieWidth = 360
        let pieHeight = 410
        top.forEach(function (d, i) {
          let xBias = 130 + pieWidth * ((i + 1) % 3)
          let yBias = 0 + pieHeight * Math.floor((i + 1) / 3)
          let pieHole = pieParty.append('g')
            .attr('transform', `translate(${piesMargin.l + xBias},
            ${piesMargin.t + pieHeight * 0.5 + yBias})`)
          let pieText = pieParty.append('g')
            .attr('transform', `translate(${piesMargin.l + xBias},${piesMargin.t + yBias})`)
          let r = DBHScale(d[3])
          let rim = rimScale(d[3])
          let pie = d3.pie().value(data => data[1])
          let pieCare = pie(Object.entries(d[4]))
          let arcGenerator = d3.arc()
            .innerRadius(0)
            .outerRadius(r - rim - 2)

          pieHole.append('circle')
            .attr('cx', 0)
            .attr('cy', 0)
            .attr('r', r)
            .attr('fill', '#704214')

          pieHole.append('circle')
            .attr('cx', 0)
            .attr('cy', 0)
            .attr('r', r - rim)
            .attr('fill', '#fff')

          pieHole.selectAll('hotPie').data(pieCare).join('path')
            .attr("d", arcGenerator)
            .attr("fill", d => caretakerScale(d.data[0]))
            .attr("stroke", '#fff')
            .attr('stroke-width', 0)

          pieHole.selectAll('hotPie').data(pieCare).join('text')
            .attr("transform", d => `translate(${arcGenerator.centroid(d)})`)
            .attr("text-anchor", "middle")
            .attr("font-size", 16)
            .attr("font-family", 'sans-serif')
            .attr("font-weight", 'bold')
            .text(d => d.data[1])

          pieHole.append("text") // species name label
            .attr("class", "pieLabel")
            .attr("x", 0)
            .attr("y", pieHeight * 0.5)
            .attr("fill", '#000')
            .attr("text-anchor", "middle")
            .attr("alignment-baseline", "middle")
            .attr("font-family", "sans-serif")
            .attr("font-size", "1.2em")
            .text(`${d[0]} - ${d[3]}"`)


        })

        // should have figured out how to add new line, eh?
        pieParty.append("text")
          .attr("x", 0)
          .attr("y", 100)
          .attr("fill", '#000')
          .attr("text-anchor", "left")
          .attr("alignment-baseline", "middle")
          .attr("font-family", "sans-serif")
          .attr("font-size", '1.5em')
          .text('Figure 2: Species breakdown')

        pieParty.append("text")
          .attr("x", 0)
          .attr("y", 130)
          .attr("fill", '#000')
          .attr("text-anchor", "left")
          .attr("alignment-baseline", "middle")
          .attr("font-family", "sans-serif")
          .attr("font-size", '1.5em')
          .text('by caretaker and DBH')


        pieParty.selectAll("rect.pieMark").data(topCaretaker).join("rect")
          .attr("class", "pieMark")
          .attr("x", 0)
          .attr("y", (d, i) => 190 + 30 * i)
          .attr("width", 20)
          .attr("height", 20)
          .attr("fill", d => caretakerScale(d))

        pieParty.selectAll("text.mainLabel").data(topCaretaker).join("text")
          .attr("class", "pieLabel")
          .attr("x", 40)
          .attr("y", (d, i) => 200 + 30 * i)
          .attr("fill", d => caretakerScale(d))
          .attr("text-anchor", "left")
          .attr("alignment-baseline", "middle")
          .attr("font-family", "sans-serif")
          .text(d => d)
      }
      render()





    </script>
  </div>

</body>

</html>